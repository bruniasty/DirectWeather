// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DirectWeather.FrontEnd.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class LocalWeatherInAGivenCityFeature : Xunit.IClassFixture<LocalWeatherInAGivenCityFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SpecFlowFeature.feature"
#line hidden
        
        public LocalWeatherInAGivenCityFeature(LocalWeatherInAGivenCityFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Local weather in a given city", "\tAs a delegated employee\r\n\tI want to check what the weather is like in a city and" +
                    " country of my choosing\r\n\tSo that I know how to dress for the business trip over" +
                    " there.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Search weather in Poland, Warsaw")]
        [Xunit.TraitAttribute("FeatureTitle", "Local weather in a given city")]
        [Xunit.TraitAttribute("Description", "Search weather in Poland, Warsaw")]
        [Xunit.TraitAttribute("Category", "directWeatherInWarsaw")]
        public virtual void SearchWeatherInPolandWarsaw()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search weather in Poland, Warsaw", new string[] {
                        "directWeatherInWarsaw"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("a webpage with a form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I type \'Poland\' in country form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I type \'Warsaw\' in city form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("I submit the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("I receive the temperature and humidity conditions on the day for Warsaw, Poland a" +
                    "ccording to the official weather reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Search weather in Poland, Gdansk")]
        [Xunit.TraitAttribute("FeatureTitle", "Local weather in a given city")]
        [Xunit.TraitAttribute("Description", "Search weather in Poland, Gdansk")]
        [Xunit.TraitAttribute("Category", "directWeatherInGdansk")]
        public virtual void SearchWeatherInPolandGdansk()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search weather in Poland, Gdansk", new string[] {
                        "directWeatherInGdansk"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("a webpage with a form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.And("I type \'Poland\' in country form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("I type \'Gdansk\' in city form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("I submit the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("I receive the temperature and humidity conditions on the day for Gdansk, Poland a" +
                    "ccording to the official weather reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Search weather in Germany, Berlin")]
        [Xunit.TraitAttribute("FeatureTitle", "Local weather in a given city")]
        [Xunit.TraitAttribute("Description", "Search weather in Germany, Berlin")]
        [Xunit.TraitAttribute("Category", "directWeatherInBerlin")]
        public virtual void SearchWeatherInGermanyBerlin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search weather in Germany, Berlin", new string[] {
                        "directWeatherInBerlin"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("a webpage with a form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.And("I type \'Germany\' in country form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I type \'Berlin\' in city form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("I submit the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("I receive the temperature and humidity conditions on the day for Berlin, Germany " +
                    "according to the official weather reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                LocalWeatherInAGivenCityFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                LocalWeatherInAGivenCityFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
